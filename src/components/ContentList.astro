---
/**
 * 独自追加ファイル
 * 
 * 目次を生成する
 * 目次の対象
 *    ページ直下->見出し1ブロック
 *    ページ直下->見出し2ブロック
 *    ページ直下->トグル見出し1ブロック
 *    ページ直下->トグル見出し2ブロック
 * 
 *    ページ直下->トグル見出し->見出し1ブロック
 *    ページ直下->トグル見出し->見出し2ブロック
 *    ページ直下->トグル見出し->トグル見出し1ブロック
 *    ページ直下->トグル見出し->トグル見出し2ブロック
 *    （2階層以上のトグルは対象外）
 */

import type { SelectProperty } from '../lib/interfaces.ts'
import { getTagLink } from '../lib/blog-helpers.ts'
import NoContents from './NoContents.astro'
import '../styles/notion-color.css'
import { Block } from '../lib/interfaces.ts'
import * as interfaces from '../lib/interfaces.ts'
import { buildHeadingId } from '../lib/blog-helpers.ts'
import { snakeToKebab } from '../lib/style-helpers.ts'
import styles from '../styles/blog.module.css'

export interface Props {
  blocks: Block[]
}

const { blocks } = Astro.props

---

<div class={`content-list`}>
  <h2>目次</h2>
  {
    blocks.length === 0 ? (
      <NoContents contents={'目次なし'} />
    ) : (
      <ul class="ul-depth-1">
        {
          // 全ブロックから「見出し1」「見出し2」を目次に使う（ただし対象はトグルの1階層目まで）
          blocks.map((Block: interfaces.Block) =>{
            const heading = Block.Heading1 || Block.Heading2/* || Block.Heading3*/
            let depthClass = ''
            // 見出しブロックの場合
            if (heading) {
              // 見出しにインデントを付ける
              if (Block.Type === 'heading_2') {
                depthClass = 'depth-2'
              } 
              else{
                depthClass = 'depth-1'
              }
            
              // 一番上の階層の見出しを取得
              let ret = [
                <li class={depthClass}>
                  <a
                    href={`#${buildHeadingId(heading)}`}
                    class={`table-of-contents blue}`}
                  >
                    {heading.RichTexts.map(
                      (richText: interfaces.RichText) => richText.PlainText
                    ).join('')}
                  </a>
                </li>
              ]

              // 子ブロックがある場合（トグル見出しの場合）
              if ( Block.HasChildren && heading.Children ){
                // 子ブロックから「見出し1」「見出し2」を目次に使う（ただし対象はトグルの1階層目まで）
                heading.Children.map((child_Block: interfaces.Block) =>{
                  const child_heading = child_Block.Heading1 || child_Block.Heading2/* || child_Block.Heading3*/
                  let depthClass = ''
                  // 見出しブロックの場合
                  if (child_heading) {
                    // 見出しにインデントを付ける
                    if (child_Block.Type === 'heading_2') {
                      depthClass = 'depth-2'
                    }
                    else{
                      depthClass = 'depth-1'
                    }

                    // トグルの1階層目の見出しを取得
                    ret.push(
                      <li class={depthClass}>
                        <a
                          href={`#${buildHeadingId(child_heading)}`}
                          class={`table-of-contents blue}`}
                        >
                          {child_heading.RichTexts.map(
                            (richText: interfaces.RichText) => richText.PlainText
                          ).join('')}
                        </a>
                      </li>
                    )
                  }
                });
              }
              
              return ret;
            }
            // 見出しでないブロックの場合
            else{
              return '';
            }
          })
        }
      </ul>
    )
  }
</div>

<style>
  .ul-depth-1{
    position: relative;
    list-style: none;
    padding: 0;
    margin: 0;
    font-size: 0.9rem;
    line-height: 1.5;
  }
  .ul-depth-1::before {
    position: absolute;
    top: 17px;
    bottom: 8px;
    left: 5px;
    width: 2px;
    content: "";
    background: var(--accents-add-1);
    border-radius: 0 0 5px 5px;
  }
  /* 全見出し共通 */
  .ul-depth-1 li{
    position: relative;
    padding-left: 21px;
    margin-top: 5px;
    font-weight: 700;
  }
  .ul-depth-1 li::before{
    position: absolute;
    content: "";
    border-radius: 99rem;
    box-sizing: border-box;
  }

  /* 見出し1 */
  .ul-depth-1 li.depth-1 {
    /* position: relative;
    padding-left: 21px;
    margin-top: 5px;
    font-weight: 700; */
  }
  .ul-depth-1 li.depth-1::before {
    top: 4px;
    left: 0;
    width: 12px;
    height: 12px;
    background: #b0d3f9;
    border: 2px solid #fff;
  }
  .ul-depth-1 li.depth-1.active::before{
    background: #3EA8FF;
    border-color: #e0efff;
  }

  /* 見出し2 */
  .ul-depth-1 li.depth-2 {
    /* position: relative;
    padding-left: 21px;
    margin-top: 5px;
    font-weight: 700; */
    font-weight: 400;
  }
  .ul-depth-1 li.depth-2::before {
    top: 6px;
    left: 2px;
    width: 8px;
    height: 8px;
    background: #d9eafb;
    border: 2px solid #fff;
  }
  .ul-depth-1 li.depth-2.active::before{
    background: #3EA8FF;
    border-color: #3EA8FF;
  }

  .ul-depth-1 li a{
    position: relative;
    display: block;
    max-height: 3.05em;
    margin: 10px 0;
    overflow: hidden;
    color: var(--accents-1);
    transition: none;

    /* 3行以上の場合は...で省略 */
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
    display: -webkit-box;
  }
  .ul-depth-1 li.depth-1 a {
    /* padding-left: 1.5rem; */
  }
  .ul-depth-1 li.depth-2 a {
    /* padding-left: 3rem; */
  }
  .content-list {
  }
  .ul-depth-1 {
    
  }
</style>

<script type="module">
  // DOMが完全に読み込まれた後に実行
  document.addEventListener('DOMContentLoaded', (event) => {
    // 本文内のすべてのh4, h5セクションを選択（目次に使う見出し）
    const sections = document.querySelectorAll('main h4, main h5')
    // 目次内のすべてのリスト項目を選択（目次の見出し）
    const navLinks = document.querySelectorAll('.content-list ul li');

    // IntersectionObserverのコールバック関数
    // 要素がビューポートに入るか出るかを監視
    const observer = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        // 要素がビューポートに入った場合 かつ 画面上端に触れたとき
        if (entry.isIntersecting && entry.boundingClientRect.top <= 0) {
          // すべてのリスト項目からアクティブクラスを削除
          navLinks.forEach(navLink => {
            navLink.classList.remove('active');
            // リンクのhref属性が現在のセクションIDと一致する場合、アクティブクラスを追加
            if (entry.target.getAttribute('data-section') === navLink.querySelector('a').getAttribute('href').substring(1)) {
              navLink.classList.add('active');
            }
          });
        }
      });
    }, { threshold: [0, 1] }); // ここで閾値を設定（セクションがビューポートに入り始めた瞬間（0%表示された時）と、完全にビューポート内に収まった時（100%表示された時）の両方で発火）

    // 各セクションをIntersectionObserverに登録
    sections.forEach(section => {
      observer.observe(section);
    });
  });
</script>
